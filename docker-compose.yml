networks:
  instashop-net:
    driver: bridge

volumes:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  redis_data:

services:
  # Base central de datos
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: insta
      POSTGRES_PASSWORD: insta123
      POSTGRES_DB: instashop
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    command: [
      "postgres",
      "-c", "wal_level=logical",
      "-c", "max_replication_slots=10", 
      "-c", "max_wal_senders=10",
      "-c", "shared_preload_libraries=pg_stat_statements"
    ]
    networks:
      - instashop-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U insta -d instashop"]
      interval: 10s
      timeout: 5s
      retries: 5

  # CRM Database
  crm-db:
    image: postgres:15
    container_name: crm_db
    environment:
      POSTGRES_USER: crm
      POSTGRES_PASSWORD: crm123
      POSTGRES_DB: crm_db
    ports:
      - "5433:5432"
    volumes:
      - ./data/crm:/var/lib/postgresql/data
    command: [
      "postgres",
      "-c", "wal_level=logical",
      "-c", "max_replication_slots=10", 
      "-c", "max_wal_senders=10",
      "-c", "shared_preload_libraries=pg_stat_statements"
    ]
    networks:
      - instashop-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crm -d crm_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ERP Database
  erp-db:
    image: postgres:15
    container_name: erp_db
    environment:
      POSTGRES_USER: erp
      POSTGRES_PASSWORD: erp123
      POSTGRES_DB: erp_db
    ports:
      - "5434:5432"
    volumes:
      - ./data/erp:/var/lib/postgresql/data
    command: [
      "postgres",
      "-c", "wal_level=logical",
      "-c", "max_replication_slots=10", 
      "-c", "max_wal_senders=10",
      "-c", "shared_preload_libraries=pg_stat_statements"
    ]
    networks:
      - instashop-net

  # E-commerce Database
  ecommerce-db:
    image: postgres:15
    container_name: ecommerce_db
    environment:
      POSTGRES_USER: ecommerce
      POSTGRES_PASSWORD: ecommerce123
      POSTGRES_DB: ecommerce_db
    ports:
      - "5435:5432"
    volumes:
      - ./data/ecommerce:/var/lib/postgresql/data
    command: [
      "postgres",
      "-c", "wal_level=logical",
      "-c", "max_replication_slots=10", 
      "-c", "max_wal_senders=10",
      "-c", "shared_preload_libraries=pg_stat_statements"
    ]
    networks:
      - instashop-net

  # Data Warehouse
  dwh-db:
    image: postgres:15
    container_name: dwh_db
    environment:
      POSTGRES_USER: dwh
      POSTGRES_PASSWORD: dwh123
      POSTGRES_DB: dwh_db
    ports:
      - "5436:5432"
    volumes:
      - ./data/dwh:/var/lib/postgresql/data
    networks:
      - instashop-net

  # Kafka Cluster KRAFT
  kafka1:
    image: bitnami/kafka:latest
    container_name: kafka1
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:19092,EXTERNAL://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:19092,EXTERNAL://localhost:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      ALLOW_PLAINTEXT_LISTENER: yes
    ports:
      - "9092:9092"
    volumes:
      - kafka1_data:/bitnami/kafka
    networks:
      - instashop-net

  kafka2:
    image: bitnami/kafka:latest
    container_name: kafka2
    environment:
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:19092,EXTERNAL://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:19092,EXTERNAL://localhost:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      ALLOW_PLAINTEXT_LISTENER: yes
    ports:
      - "9093:9092"
    volumes:
      - kafka2_data:/bitnami/kafka
    networks:
      - instashop-net
    depends_on:
      - kafka1

  kafka3:
    image: bitnami/kafka:latest
    container_name: kafka3
    environment:
      KAFKA_CFG_NODE_ID: 3
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:19092,EXTERNAL://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:19092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      ALLOW_PLAINTEXT_LISTENER: yes
    ports:
      - "9094:9092"
    volumes:
      - kafka3_data:/bitnami/kafka
    networks:
      - instashop-net
    depends_on:
      - kafka1

  # Spark Master
  spark:
    image: bitnami/spark:latest
    container_name: spark
    environment:
      SPARK_MODE: master
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./spark-app:/opt/spark-app
      - ./:/app  # Volumen para ETL scripts
    networks:
      - instashop-net

  # Jupyter con PySpark
  jupyter:
    image: jupyter/pyspark-notebook
    container_name: jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./spark-app:/home/jovyan/work
    networks:
      - instashop-net

  # Redis para m√©tricas en tiempo real
  redis:
    image: redis:7-alpine
    container_name: redis-metrics
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - instashop-net

  # Debezium Connect para CDC
  debezium-connect:
    image: debezium/connect:2.4
    container_name: debezium-connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka1:19092,kafka2:19092,kafka3:19092
      GROUP_ID: debezium-connect-group
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_statuses
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
    volumes:
      - ./debezium-config:/debezium-config
    networks:
      - instashop-net
    depends_on:
      - kafka1
      - postgres
      - crm-db